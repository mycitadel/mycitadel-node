#compdef mycitadel

autoload -U is-at-least

_mycitadel() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-T+[Use Tor]: :_hosts' \
'--tor-proxy=[Use Tor]: :_hosts' \
'-x+[ZMQ socket name/address for MyCitadel node RPC interface]: :_files' \
'--rpc-endpoint=[ZMQ socket name/address for MyCitadel node RPC interface]: :_files' \
'-n+[Blockchain to use]' \
'--chain=[Blockchain to use]' \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'--electrum-server=[Electrum server connection string]' \
'--rgb20-endpoint=[RGB node connection string]' \
'-c+[Path to the configuration file]: :_files' \
'--config=[Path to the configuration file]: :_files' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
'--init[Initializes config file with the default values]' \
'--rgb-embedded[]' \
":: :_mycitadel_commands" \
"*::: :->mycitadel" \
&& ret=0
    case $state in
    (mycitadel)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-command-$line[1]:"
        case $line[1] in
            (wallet)
_arguments "${_arguments_options[@]}" \
'-n+[Blockchain to use]' \
'--chain=[Blockchain to use]' \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
":: :_mycitadel__wallet_commands" \
"*::: :->wallet" \
&& ret=0
case $state in
    (wallet)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-wallet-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
'-f+[How the wallet list should be formatted]' \
'--format=[How the wallet list should be formatted]' \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
":: :_mycitadel__wallet__create_commands" \
"*::: :->create" \
&& ret=0
case $state in
    (create)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-wallet-create-command-$line[1]:"
        case $line[1] in
            (single-sig)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
'(--legacy --segwit --taproot)--bare[Creates old "bare" wallets, where public key is kept in the explicit form within bitcoin transaction P2PK output]' \
'(--bare --segwit --taproot)--legacy[Whether create a pre-SegWit wallet (P2PKH) rather than SegWit (P2WPKH). If you'\''d like to use legacy SegWit-style addresses (P2WPKH-in-P2SH), do not use this flag, create normal SegWit wallet instead and specify `--legacy` option when requesting new address]' \
'(--legacy --bare --taproot)--segwit[Recommended SegWit wallet with P2WKH and P2WPKH-in-P2SH outputs]' \
'(--legacy --segwit --bare)--taproot[Reserved for the future taproot P2TR outputs]' \
':name -- Wallet name:' \
':pubkey-chain -- Extended public key with derivation info:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(rename)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
':wallet-id -- Wallet id to rename:' \
':new-name -- New name of the wallet:' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
':wallet-id -- Wallet id to delete:' \
&& ret=0
;;
(balance)
_arguments "${_arguments_options[@]}" \
'--lookup-depth=[How many addresses should be scanned at least after the final address with no transactions is reached. Defaults to 20]' \
'-f+[How the command output should be formatted]' \
'--format=[How the command output should be formatted]' \
'--help[Print help information]' \
'--version[Print version information]' \
'-r[Whether to re-scan addresses space with Electrum server]' \
'--rescan[Whether to re-scan addresses space with Electrum server]' \
':wallet-id -- Wallet id for the operation:' \
&& ret=0
;;
(sign)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
':wallet-id -- Wallet id to sign PSBT from:' \
':psbt -- PSBT data in Bech32 encoding:' \
&& ret=0
;;
(publish)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
':wallet-id -- Wallet id to sign PSBT from:' \
':psbt -- PSBT data in Bech32 encoding:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(address)
_arguments "${_arguments_options[@]}" \
'-n+[Blockchain to use]' \
'--chain=[Blockchain to use]' \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
":: :_mycitadel__address_commands" \
"*::: :->address" \
&& ret=0
case $state in
    (address)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-address-command-$line[1]:"
        case $line[1] in
            (list-used)
_arguments "${_arguments_options[@]}" \
'--lookup-depth=[How many addresses should be scanned at least after the final address with no transactions is reached. Defaults to 20]' \
'-f+[How the command output should be formatted]' \
'--format=[How the command output should be formatted]' \
'--help[Print help information]' \
'--version[Print version information]' \
'-r[Whether to re-scan addresses space with Electrum server]' \
'--rescan[Whether to re-scan addresses space with Electrum server]' \
':wallet-id -- Wallet id for the operation:' \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" \
'-i+[Create address at custom index number]' \
'--index=[Create address at custom index number]' \
'-f+[How the asset list output should be formatted]' \
'--format=[How the asset list output should be formatted]' \
'--help[Print help information]' \
'--version[Print version information]' \
'-u[Whether to mark address as used]' \
'--unmark[Whether to mark address as used]' \
'--legacy[Use SegWit legacy address format (applicable only to a SegWit wallets)]' \
':wallet-id -- Wallet for address generation:' \
&& ret=0
;;
(mark-used)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
'--legacy[Use SegWit legacy address format (applicable only to a SegWit wallets)]' \
'-u[Remove use mark (inverses the command)]' \
'--unmark[Remove use mark (inverses the command)]' \
':wallet-id -- Wallet for using the address:' \
'::index -- Index of address derivation path (use `address list` command to see address indexes:' \
&& ret=0
;;
(pay)
_arguments "${_arguments_options[@]}" \
'-o+[File name to output PSBT. If no name is given PSBT data are output to STDOUT]' \
'--output=[File name to output PSBT. If no name is given PSBT data are output to STDOUT]' \
'-f+[PSBT format to use for the output; if no file is specified defaults to Base64 output; otherwise defaults to binary]' \
'--format=[PSBT format to use for the output; if no file is specified defaults to Base64 output; otherwise defaults to binary]' \
'--help[Print help information]' \
'--version[Print version information]' \
':address -- Address to pay to:' \
':amount -- Amount to pay to the address:' \
':fee -- Fee to pay, in satoshis:' \
':pay-from -- Wallet to take funds from for paying to the address:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(asset)
_arguments "${_arguments_options[@]}" \
'-n+[Blockchain to use]' \
'--chain=[Blockchain to use]' \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
":: :_mycitadel__asset_commands" \
"*::: :->asset" \
&& ret=0
case $state in
    (asset)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-asset-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
'-f+[How the asset list output should be formatted]' \
'--format=[How the asset list output should be formatted]' \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
':genesis -- Bech32-representation of the asset genesis (string starting with `genesis1....`:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(invoice)
_arguments "${_arguments_options[@]}" \
'-n+[Blockchain to use]' \
'--chain=[Blockchain to use]' \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
":: :_mycitadel__invoice_commands" \
"*::: :->invoice" \
&& ret=0
case $state in
    (invoice)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:mycitadel-invoice-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" \
'-a+[Asset in which the payment is requested; defaults to bitcoin on the currently used blockchain (mainnet, liqud, testnet etc)]' \
'--asset=[Asset in which the payment is requested; defaults to bitcoin on the currently used blockchain (mainnet, liqud, testnet etc)]' \
'-m+[Optional details about the merchant providing the invoice]' \
'--merchant=[Optional details about the merchant providing the invoice]' \
'-p+[Information about the invoice]' \
'--purpose=[Information about the invoice]' \
'--help[Print help information]' \
'--version[Print version information]' \
'-u[Whether to mark address as used]' \
'--unmark[Whether to mark address as used]' \
'--legacy[Use SegWit legacy address format (applicable only to a SegWit wallets)]' \
'(--psbt)--descriptor[Create descriptor-based invoice (not compatible with instant wallet accounts)]' \
'(--descriptor)--psbt[Create a PSBT-based invoice (not compatible with instant wallet accounts)]' \
':wallet-id -- Wallet where the payment should go:' \
':amount -- Amount of the asset (in the smallest asset units, without floating point - i.e. for bitcoin use satoshis):' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'-f+[How invoice list should be formatted]' \
'--format=[How invoice list should be formatted]' \
'--help[Print help information]' \
'--version[Print version information]' \
':wallet-id -- Wallet for invoice list:' \
&& ret=0
;;
(info)
_arguments "${_arguments_options[@]}" \
'-f+[Format to use for the invoice representation]' \
'--format=[Format to use for the invoice representation]' \
'--help[Print help information]' \
'--version[Print version information]' \
':invoice -- Invoice Bech32 string representation:' \
&& ret=0
;;
(pay)
_arguments "${_arguments_options[@]}" \
'-a+[Force payment with the specified amount (always in satoshis). Required for invoices that does not provide amount field. For other types of invoices, if provided, overrides the amount found in the invoice]' \
'--amount=[Force payment with the specified amount (always in satoshis). Required for invoices that does not provide amount field. For other types of invoices, if provided, overrides the amount found in the invoice]' \
'-o+[File name to output PSBT. If no name is given PSBT data are output to STDOUT]' \
'--output=[File name to output PSBT. If no name is given PSBT data are output to STDOUT]' \
'-c+[File name to output consignment. If no name is given, consignment data are output to STDOUT in Bech32 format]' \
'--consignment=[File name to output consignment. If no name is given, consignment data are output to STDOUT in Bech32 format]' \
'-f+[PSBT format to use for the output; if no file is specified defaults to Base64 output; otherwise defaults to binary]' \
'--format=[PSBT format to use for the output; if no file is specified defaults to Base64 output; otherwise defaults to binary]' \
'-g+[How much satoshis to give away with RGB payment; required and allowed only when paying descriptor-based RGB invoices]' \
'--giveaway=[How much satoshis to give away with RGB payment; required and allowed only when paying descriptor-based RGB invoices]' \
'--help[Print help information]' \
'--version[Print version information]' \
':invoice -- Invoice Bech32 string representation:' \
':wallet-id -- Wallet to pay from:' \
':fee -- Fee to pay, in satoshis:' \
&& ret=0
;;
(accept)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
'-f[Whether parameter given by consignment is a file name or a Bech32 string]' \
'--file[Whether parameter given by consignment is a file name or a Bech32 string]' \
':consignment -- Consignment data to accept:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
'-n+[Blockchain to use]' \
'--chain=[Blockchain to use]' \
'-d+[Data directory path]: :_files -/' \
'--data-dir=[Data directory path]: :_files -/' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'*-v[Set verbosity level]' \
'*--verbose[Set verbosity level]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_mycitadel_commands] )) ||
_mycitadel_commands() {
    local commands; commands=(
'wallet:Wallet management commands' \
'address:Address-related commands' \
'asset:Asset management commands' \
'invoice:Invoice-related commands' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'mycitadel commands' commands "$@"
}
(( $+functions[_mycitadel__invoice__accept_commands] )) ||
_mycitadel__invoice__accept_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel invoice accept commands' commands "$@"
}
(( $+functions[_mycitadel__address_commands] )) ||
_mycitadel__address_commands() {
    local commands; commands=(
'list-used:Print address list' \
'create:' \
'mark-used:' \
'pay:' \
    )
    _describe -t commands 'mycitadel address commands' commands "$@"
}
(( $+functions[_mycitadel__asset_commands] )) ||
_mycitadel__asset_commands() {
    local commands; commands=(
'list:Lists known assets' \
'import:Import asset genesis data' \
    )
    _describe -t commands 'mycitadel asset commands' commands "$@"
}
(( $+functions[_mycitadel__wallet__balance_commands] )) ||
_mycitadel__wallet__balance_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel wallet balance commands' commands "$@"
}
(( $+functions[_mycitadel__address__create_commands] )) ||
_mycitadel__address__create_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel address create commands' commands "$@"
}
(( $+functions[_mycitadel__invoice__create_commands] )) ||
_mycitadel__invoice__create_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel invoice create commands' commands "$@"
}
(( $+functions[_mycitadel__wallet__create_commands] )) ||
_mycitadel__wallet__create_commands() {
    local commands; commands=(
'single-sig:Creates current single-sig wallet account' \
    )
    _describe -t commands 'mycitadel wallet create commands' commands "$@"
}
(( $+functions[_mycitadel__wallet__delete_commands] )) ||
_mycitadel__wallet__delete_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel wallet delete commands' commands "$@"
}
(( $+functions[_mycitadel__help_commands] )) ||
_mycitadel__help_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel help commands' commands "$@"
}
(( $+functions[_mycitadel__asset__import_commands] )) ||
_mycitadel__asset__import_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel asset import commands' commands "$@"
}
(( $+functions[_mycitadel__invoice__info_commands] )) ||
_mycitadel__invoice__info_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel invoice info commands' commands "$@"
}
(( $+functions[_mycitadel__invoice_commands] )) ||
_mycitadel__invoice_commands() {
    local commands; commands=(
'create:Create new invoice' \
'list:List all issued invoices' \
'info:Parse invoice and print out its detailed information' \
'pay:Pay an invoice' \
'accept:Accept payment for the invoice. Required only for on-chain RGB payments; Bitcoin & Lightning-network payments (including RGB lightning) are accepted automatically and does not require calling this method' \
    )
    _describe -t commands 'mycitadel invoice commands' commands "$@"
}
(( $+functions[_mycitadel__asset__list_commands] )) ||
_mycitadel__asset__list_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel asset list commands' commands "$@"
}
(( $+functions[_mycitadel__invoice__list_commands] )) ||
_mycitadel__invoice__list_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel invoice list commands' commands "$@"
}
(( $+functions[_mycitadel__wallet__list_commands] )) ||
_mycitadel__wallet__list_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel wallet list commands' commands "$@"
}
(( $+functions[_mycitadel__address__list-used_commands] )) ||
_mycitadel__address__list-used_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel address list-used commands' commands "$@"
}
(( $+functions[_mycitadel__address__mark-used_commands] )) ||
_mycitadel__address__mark-used_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel address mark-used commands' commands "$@"
}
(( $+functions[_mycitadel__address__pay_commands] )) ||
_mycitadel__address__pay_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel address pay commands' commands "$@"
}
(( $+functions[_mycitadel__invoice__pay_commands] )) ||
_mycitadel__invoice__pay_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel invoice pay commands' commands "$@"
}
(( $+functions[_mycitadel__wallet__publish_commands] )) ||
_mycitadel__wallet__publish_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel wallet publish commands' commands "$@"
}
(( $+functions[_mycitadel__wallet__rename_commands] )) ||
_mycitadel__wallet__rename_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel wallet rename commands' commands "$@"
}
(( $+functions[_mycitadel__wallet__sign_commands] )) ||
_mycitadel__wallet__sign_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel wallet sign commands' commands "$@"
}
(( $+functions[_mycitadel__wallet__create__single-sig_commands] )) ||
_mycitadel__wallet__create__single-sig_commands() {
    local commands; commands=()
    _describe -t commands 'mycitadel wallet create single-sig commands' commands "$@"
}
(( $+functions[_mycitadel__wallet_commands] )) ||
_mycitadel__wallet_commands() {
    local commands; commands=(
'list:Lists existing wallets' \
'create:Creates wallet with a given name and descriptor parameters' \
'rename:Change a name of a wallet' \
'delete:Delete existing wallet contract' \
'balance:Returns detailed wallet balance information' \
'sign:Signs given PSBT with keys controlled by a wallet master extended keys' \
'publish:Finalizes fully-signed PSBT and publishes transaction to bitcoin network, updating PSBT data stored in wallet `wallet_id`' \
    )
    _describe -t commands 'mycitadel wallet commands' commands "$@"
}

_mycitadel "$@"